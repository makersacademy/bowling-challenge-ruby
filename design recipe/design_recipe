Bowling Multi-Class Planned Design Recipe
1. Describe the Problem
Put or write the user story here. Add any clarifying notes you might have.

2. Design the Class System
Consider diagramming out the classes and their relationships. Take care to focus on the details you see as important, not everything. The diagram below uses asciiflow.com but you could also use excalidraw.com, draw.io, or miro.com

┌────────────────────────────┐
│ BowlingGame(player)        │
│ - player = player          │
│ ...............            │
│ - all                      │
│ - add(frame)               │
│ - calculate                │
│ - total_score              │
└───────────┬────────────────┘
            │
            │ owns a list of
            ▼
┌─────────────────────────┐
│ frame(roll_1, roll_2)   │
│ - scorecard = [ ]       │
│ - roll_1                │
│ - roll_2                │
└─────────────────────────┘
Also design the interface of each class in more detail.


class BowlingGame
  def initialize
    # ...
  end

  def add(frame) # frame is an instance of Frame
    # Frame gets added to the scorecard in NewGame
    # Returns nothing
  end

  def all
    # Returns a list of frames objects
  end
  
  def calculate
    # calculate the score of each frame
    # add the result to score_of_each_frame

  end
end

class Frame
  def initialize 
    frame = []
  end

  def roll_1(score_1) # roll_1 is an int
    # if roll_1 == 10
    # score is 10, return 10
    # no second roll

    # return roll_1
  end

  def roll_2(score_2) # roll_2 is an int
    # roll_1 + roll_2 = 10
    # score is 10, return 10
    # esle
    # return roll_2
  end

  def all
    return frame = [score_1, score_2]
  end
end


3. Create Examples as Integration Tests
Create examples of the classes being used together in different situations and combinations that reflect the ways in which the system will be used.

# EXAMPLE

# Gets all frames
game = NewGame.new
frame_1 = Frame.new(1, 9)
frame_2 = Frame.new(4, 1)
frame_3 = Frame.new(2, 3)
frame_4 = Frame.new(1, 2)
frame_5 = Frame.new(5, 0)
frame_6 = Frame.new(3, 4)
frame_7 = Frame.new(4, 5)
frame_8 = Frame.new(5, 1)
frame_9 = Frame.new(6, 2)
frame_10 = Frame.new(7, 2)

game.add(frame_1)
game.add(frame_2)
game.add(frame_3)
game.add(frame_4)
game.add(frame_5)
game.add(frame_6)
game.add(frame_7)
game.add(frame_8)
game.add(frame_9)
game.add(frame_10)

game.all # => [frame_1, frame_2, frame_3, frame_4, frame_5, frame_6, frame_7, frame_8, frame_9, frame_10]




4. Create Examples as Unit Tests
Create examples, where appropriate, of the behaviour of each relevant class at a more granular level of detail.

# EXAMPLE

# Constructs a frame
newgame = Frame.new(pins_knocked_down_1, pins_knocked_down_2)
newgame.frame # => (3, 6)

newgame.strike # => (10)

newgame.spare # => (5, 5)
Encode each example as a test. You can add to the above list as you go.

5. Implement the Behaviour
After each test you write, follow the test-driving process of red, green, refactor to implement the behaviour.

